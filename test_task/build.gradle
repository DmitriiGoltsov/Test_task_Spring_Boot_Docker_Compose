plugins {
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'application'
    id 'org.liquibase.gradle' version '2.2.0'
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.6.0"
    id 'org.siouan.frontend-jdk11' version '6.0.0'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.goltsov.test_task.test_task'
version = '1.0'

java {
    sourceCompatibility = '17'
}

compileJava {
    options.release = 17
    options.encoding = 'UTF-8'
}

wrapper {
    gradleVersion = '8.3'
    distributionType = Wrapper.DistributionType.ALL
}

application {
    mainClass = 'com.goltsov.test_task.test_task.TestTaskApplication'
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation(
            // Spring Boot dependencies
            'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-oauth2-resource-server',
            'org.springframework.boot:spring-boot-starter-jdbc',

            // Querydsl-jpa dependency
            'com.querydsl:querydsl-jpa:5.0.0:jakarta',

            // Liquibase dependencies
            'org.liquibase:liquibase-core',

            // Mappers and mapstruct
            'org.openapitools:jackson-databind-nullable:0.2.6',
            'org.mapstruct:mapstruct:1.5.5.Final',

            // Swagger
            'io.swagger.core.v3:swagger-annotations:2.2.15',
            'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0',

            // jjwt library for working with JWT
            'io.jsonwebtoken:jjwt:0.9.1',

            'javax.xml.bind:jaxb-api:2.4.0-b180830.0359',

            // rollbar (bug tracker) dependency
            'com.rollbar:rollbar-spring-boot3-webmvc:1.10.0'
    )

    runtimeOnly(
            'org.postgresql:postgresql:42.6.0',
            'com.h2database:h2:2.2.222',
    )

    liquibaseRuntime(
            sourceSets.main.output,
            'org.liquibase:liquibase-core',
            'info.picocli:picocli:4.7.1',
            'org.liquibase.ext:liquibase-hibernate6:4.21.1',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'com.h2database:h2',
    )

    annotationProcessor(
            'org.projectlombok:lombok',
            'com.querydsl:querydsl-apt:5.0.0:jakarta',
            'jakarta.persistence:jakarta.persistence-api:3.1.0'
    )

    testImplementation(
            'org.springframework.security:spring-security-test',
            'org.springframework.boot:spring-boot-starter-test'
    )

}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

checkstyle {
    toolVersion '10.12.1'
}

checkstyleMain.exclude '**/build/generated/sources/annotationProcessor/java/main/**'

diffChangelog {
    dependsOn compileJava
}

liquibase {
    activities {
        main {
            // Указываем путь, по которому будет сгенерирован файл миграции
            changelogFile 'src/main/resources/db/changelog/db.changelog-master.yml'
            // Указываем источник, с которым будут сравниваться изменения
            // Это база данных, изначально она пустая
            url 'jdbc:h2:mem:taskmanager'
            // Имя пользователя и пароль для подключения к базе
            username 'sa'
            password 'sa'
            // Сравниваем с моделями, задавая пакет
            referenceUrl 'hibernate:spring:com.goltsov.test_task.test_task.model.' +
                    // Указываем диалект
                    '?dialect=org.hibernate.dialect.H2Dialect'
            // Указываем правила именования таблиц и столбцов,
            // чтобы они соответствовали правилам Spring
            '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
        }
    }
}

task stage(dependsOn: [clean, installDist])
installDist.mustRunAfter clean